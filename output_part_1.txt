Есть проект: ( multi_agent_system/ ├── .env.example ├── config/ │   ├── __init__.py │   └── settings.py ├── agents/ │   ├── __init__.py │   ├── factory.py │   └── gemini_agent.py ├── database/ │   ├── __init__.py │   ├── models.py │   └── crud.py ├── embeddings/ │   ├── __init__.py │   └── manager.py ├── utils/ │   ├── __init__.py │   ├── logging.py │   └── error_handling.py ├── tests/ │   ├── __init__.py │   ├── conftest.py │   ├── test_agents.py │   └── test_database.py ├── main.py ├── requirements.txt ├── Dockerfile └── README.md 1. config/settings.py python import os from dotenv import load_dotenv from pydantic import BaseSettings load_dotenv() class Settings(BaseSettings): API_KEY: str = os.getenv("GEMINI_API_KEY", "") EMBEDDINGS_MODEL: str = "models/embedding-001" GENERATION_MODEL: str = "gemini-pro" DATABASE_URL: str = "sqlite:///./documents.db" MAX_TOKENS: int = 2048 settings = Settings() 2. utils/logging.py python import logging def configure_logging(): logging.basicConfig( level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", handlers=[logging.StreamHandler()] ) 3. utils/error_handling.py python from functools import wraps import logging logger = logging.getLogger(__name__) def handle_errors(func): @wraps(func) def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except Exception as e: logger.error(f"Error in {func.__name__}: {str(e)}") raise return wrapper 4. agents/gemini_agent.py python import google.generativeai as genai from config.settings import settings class GeminiAgent: def __init__(self): genai.configure(api_key=settings.API_KEY) @property def generation_model(self): return genai.GenerativeModel(settings.GENERATION_MODEL) @handle_errors def generate_text(self, prompt: str) -> str: response = self.generation_model.generate_content(prompt) return response.text 5. agents/factory.py python from .gemini_agent import GeminiAgent from utils.error_handling import handle_errors class AgentFactory: def __init__(self): self.agent = GeminiAgent() @handle_errors def create_agent(self, role: str, task: str): def agent_func(input_data: str) -> str: prompt = f"Вы {role}. {task}\n{input_data}" return self.agent.generate_text(prompt) return agent_func 6. database/models.py python from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.sql import func from config.settings import settings Base = declarative_base() class Document(Base): __tablename__ = "documents" id = Column(Integer, primary_key=True) title = Column(String(255), nullable=False) content = Column(Text, nullable=False) status = Column(String(50), default="pending") created_at = Column(DateTime(timezone=True), server_default=func.now()) engine = create_engine(settings.DATABASE_URL) Base.metadata.create_all(bind=engine) 7. database/crud.py python from sqlalchemy.orm import sessionmaker from .models import Document, engine from utils.error_handling import handle_errors SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) class DBOperations: @handle_errors def add_document(self, title: str, content: str, status: str = "pending"): with SessionLocal() as session: doc = Document(title=title, content=content, status=status) session.add(doc) session.commit() return doc.id @handle_errors def get_documents(self, status: str = None): with SessionLocal() as session: query = session.query(Document) if status: query = query.filter(Document.status == status) return query.all() @handle_errors def update_status(self, doc_id: int, status: str): with SessionLocal() as session: doc = session.query(Document).get(doc_id) if doc: doc.status = status session.commit() return True return False 8. embeddings/manager.py python from langchain.embeddings import GooglePalmEmbeddings from langchain.vectorstores import FAISS from config.settings import settings class EmbeddingManager: def __init__(self): self.embeddings = GooglePalmEmbeddin